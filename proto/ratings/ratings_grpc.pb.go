// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.6.1
// source: proto/ratings/ratings.proto

package ratings

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ratings_GetRatings_FullMethodName = "/ratings.Ratings/getRatings"
)

// RatingsClient is the client API for Ratings service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RatingsClient interface {
	GetRatings(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Result, error)
}

type ratingsClient struct {
	cc grpc.ClientConnInterface
}

func NewRatingsClient(cc grpc.ClientConnInterface) RatingsClient {
	return &ratingsClient{cc}
}

func (c *ratingsClient) GetRatings(ctx context.Context, in *Product, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := c.cc.Invoke(ctx, Ratings_GetRatings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RatingsServer is the server API for Ratings service.
// All implementations must embed UnimplementedRatingsServer
// for forward compatibility
type RatingsServer interface {
	GetRatings(context.Context, *Product) (*Result, error)
	mustEmbedUnimplementedRatingsServer()
}

// UnimplementedRatingsServer must be embedded to have forward compatible implementations.
type UnimplementedRatingsServer struct {
}

func (UnimplementedRatingsServer) GetRatings(context.Context, *Product) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRatings not implemented")
}
func (UnimplementedRatingsServer) mustEmbedUnimplementedRatingsServer() {}

// UnsafeRatingsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RatingsServer will
// result in compilation errors.
type UnsafeRatingsServer interface {
	mustEmbedUnimplementedRatingsServer()
}

func RegisterRatingsServer(s grpc.ServiceRegistrar, srv RatingsServer) {
	s.RegisterService(&Ratings_ServiceDesc, srv)
}

func _Ratings_GetRatings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Product)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RatingsServer).GetRatings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ratings_GetRatings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RatingsServer).GetRatings(ctx, req.(*Product))
	}
	return interceptor(ctx, in, info, handler)
}

// Ratings_ServiceDesc is the grpc.ServiceDesc for Ratings service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ratings_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ratings.Ratings",
	HandlerType: (*RatingsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "getRatings",
			Handler:    _Ratings_GetRatings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/ratings/ratings.proto",
}
